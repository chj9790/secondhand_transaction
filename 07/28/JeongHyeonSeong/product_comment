

--------------------------------

//product_detail

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html>
<head>
    <title>상품 상세</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
    #commentList {
        margin-top: 20px;
    }
    .comment-box {
        background-color: #f0f0f0; 
        padding: 10px 15px;
        margin-bottom: 12px;
        border-radius: 5px;
        width: 80%;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        position: relative;
    }
    .comment-user {
        font-weight: bold;
        margin-bottom: 4px;
        font-size: 1.1em;
        color: #333;
    }
    .comment-content {
        margin-bottom: 8px;
        font-size: 1em;
        color: #222;
        white-space: pre-wrap; 
    }
    
    .comment-date {
        font-size: 0.85em;
        color: #666;
        text-align: left;
        font-family: 'Courier New', Courier, monospace;
    }
    
    .comment-actions { 
    	position: absolute; 
    	top: 10px; 
    	right: 10px; 
    }
    
    .comment-actions { 
	    position: absolute; 
	    top: 10px; 
	    right: 10px; 
	}
	
	.comment-actions button { 
	    margin-left: 5px; 
	}
	    
    
    
</style>
</head>
<body>

    <jsp:include page="include/header.jsp" />

    <h2>${product.product_name}</h2>
    <img src="${product.product_img}" width="300" height="300">
    <p><b>가격:</b> ${product.sales_price}원</p>
    <p><b>지역:</b> ${product.sales_area}</p>
    <p><b>등록일:</b> ${product.product_date}</p>
    <p><b>판매자:</b> ${product.user_id}</p>

    <form method="post" action="wishlist_insert.do">
        <input type="hidden" name="user_id" value="${user.user_id}">
        <input type="hidden" name="product_num" value="${product.product_num}">
        <button type="submit">찜하기</button>
    </form>

    <form method="post" action="payment_form.go">
        <input type="hidden" name="product_num" value="${product.product_num}">
        <button type="submit">구매하기</button>
    </form>

    <form method="post" action="chat_room_insert.go">
        <input type="hidden" name="buyer_id" value="${user.user_id}">
        <input type="hidden" name="seller_id" value="${product.user_id}">
        <input type="hidden" name="product_num" value="${product.product_num}">
        <button type="submit">대화하기</button>
    </form>

    <h3>댓글</h3>
    <form id="commentForm">
        <input type="hidden" name="product_num" value="${product.product_num}">
        <input type="hidden" name="user_id" value="${user.user_id}">
        <textarea name="comment_content" rows="3" cols="50" placeholder="댓글을 입력하세요."></textarea>
        <button type="button" id="addCommentBtn">댓글 등록</button>
    </form>

    <div id="commentList"></div>

    <jsp:include page="include/footer.jsp" />

    <script>
	const loggedInUserId = "${user.user_id}";
	
	$(document).ready(function() {
	    loadComments();
	
	    $('#addCommentBtn').click(function() {
	        const data = {
	            product_num: $('input[name="product_num"]').val(),
	            user_id: $('input[name="user_id"]').val(),
	            comment_content: $('textarea[name="comment_content"]').val().trim()
	        };
	
	        if (data.comment_content === "") {
	            alert("댓글 내용을 입력하세요.");
	            return;
	        }
	
	        $.post('product_comment_insert.go', data, function(response) {
	            $('textarea[name="comment_content"]').val('');
	            loadComments();
	        });
	    });
	
	    $(document).on('click', '.delete-comment-btn', function() {
	        if (!confirm('정말 삭제하시겠습니까?')) return;
	
	        let commentId = $(this).data('id');
	
	        $.post('product_comment_delete.go', { comment_id: commentId }, function(response) {
	            if (response === 'success') {
	                alert('댓글이 삭제되었습니다.');
	                loadComments();
	            } else {
	                alert('삭제 실패');
	            }
	        });
	    });
	
	    $(document).on('click', '.edit-comment-btn', function() {
	        let commentId = $(this).data('id');
	        let contentDiv = $(this).closest('.comment-box').find('.comment-content');
	        let currentContent = contentDiv.text();
	
	        let newContent = prompt('댓글 수정:', currentContent);
	        if (newContent !== null) {
	            $.post('product_comment_update.go', { comment_id: commentId, comment_content: newContent }, function(response) {
	                if (response === 'success') {
	                    alert('수정 성공');
	                    loadComments();
	                } else {
	                    alert('수정 실패');
	                }
	            });
	        }
	    });
	
	    function loadComments() {
	        $.getJSON('product_comment_list.go', { product_num: $('input[name="product_num"]').val() }, function(comments) {
	            $('#commentList').empty();
	            $.each(comments, function(index, comment) {
	
	                let date = new Date(comment.comment_date);
	                date.setHours(date.getHours());
	
	                let formattedDate = date.getFullYear() + '-' +
	                    ('0' + (date.getMonth() + 1)).slice(-2) + '-' +
	                    ('0' + date.getDate()).slice(-2) + ' ' +
	                    ('0' + date.getHours()).slice(-2) + ':' +
	                    ('0' + date.getMinutes()).slice(-2) + ':' +
	                    ('0' + date.getSeconds()).slice(-2);
	
	                let $commentBox = $('<div>').addClass('comment-box');
	                $commentBox.append($('<div>').addClass('comment-user').text(comment.user_id));
	                $commentBox.append($('<div>').addClass('comment-content').text(comment.comment_content));
	                $commentBox.append($('<div>').addClass('comment-date').text(formattedDate));
	
	                console.log("로그인한 유저ID:", loggedInUserId);
	                console.log("댓글 유저ID:", comment.user_id);
	                
	                // 본인 댓글일 때만 삭제/수정 버튼 보이기
	                if ($.trim(comment.user_id) === $.trim(loggedInUserId)) {
					    let $actions = $('<div>').addClass('comment-actions');
					    let $deleteBtn = $('<button>').text('삭제').addClass('delete-comment-btn').attr('data-id', comment.comment_id);
					    let $editBtn = $('<button>').text('수정').addClass('edit-comment-btn').attr('data-id', comment.comment_id);
					    $actions.append($editBtn).append($deleteBtn);
					    $commentBox.append($actions);
					}

	
	                $('#commentList').append($commentBox);
	            });
	        });
	    }
	});
	</script>


</body>
</html>
    $(document).ready(function() {
        loadComments();

        $('#addCommentBtn').click(function() {
            const data = {
                product_num: $('input[name="product_num"]').val(),
                user_id: $('input[name="user_id"]').val(),
                comment_content: $('textarea[name="comment_content"]').val().trim()
            };

            if (data.comment_content === "") {
                alert("댓글 내용을 입력하세요.");
                return;
            }

            $.post('product_comment_insert.go', data, function(response) {
                $('textarea[name="comment_content"]').val('');
                loadComments();
            });
        });

        function loadComments() {
            $.getJSON('product_comment_list.go', { product_num: $('input[name="product_num"]').val() }, function(comments) {
                $('#commentList').empty();
                $.each(comments, function(index, comment) {

                    let originalDate = comment.comment_date;
                    let date = new Date(originalDate);
                    date.setHours(date.getHours()); 

                    let formattedDate = date.getFullYear() + '-' +
                        ('0' + (date.getMonth() + 1)).slice(-2) + '-' +
                        ('0' + date.getDate()).slice(-2) + ' ' +
                        ('0' + date.getHours()).slice(-2) + ':' +
                        ('0' + date.getMinutes()).slice(-2) + ':' +
                        ('0' + date.getSeconds()).slice(-2);

                    let $commentBox = $('<div>').addClass('comment-box');
                    $commentBox.append($('<div>').addClass('comment-user').text(comment.user_id));
                    $commentBox.append($('<div>').addClass('comment-content').text(comment.comment_content));
                    $commentBox.append($('<div>').addClass('comment-date').text(formattedDate));

                    $('#commentList').append($commentBox);
                });

            });
        }
    });   


    </script>

</body>
</html>

------------------------------------
//transaction.xml

<select id="getcommentsbyproduct" parameterType="int" resultType="com.boot.transaction.model.ProductCommentDTO">
    select * from product_comment where product_num = #{product_num} order by comment_date desc
</select>

<insert id="insertproductcomment" parameterType="com.boot.transaction.model.ProductCommentDTO">
    insert into product_comment (comment_id, product_num, user_id, comment_content)
    values (product_comment_seq.nextval, #{product_num}, #{user_id}, #{comment_content})
</insert>

<delete id="deleteproductcomment" parameterType="int">
    delete from product_comment where comment_id = #{comment_id}
</delete>

<update id="updateproductcomment" parameterType="map">
    update product_comment
    set comment_content = #{comment_content}
    where comment_id = #{comment_id}
</update>

----------------------------------
//ProductCommentDTO

package com.boot.transaction.model;


import java.sql.Timestamp;

import lombok.Data;

@Data
public class ProductCommentDTO {
    private int comment_id;
    private int product_num;
    private String user_id;
    private String comment_content;
    private Timestamp comment_date;
}

-------------------------------
//TransactionMapper.java

List<ProductCommentDTO> getCommentsByProduct(int product_num);

void insertProductComment(ProductCommentDTO commentDTO);
	    
void deleteProductComment(@Param("comment_id") int commentId);
  
void updateProductComment(@Param("comment_id") int commentId, @Param("comment_content") String commentContent);

------------------------------
//TransactionController.java

    @GetMapping("product_comment_list.go")
    @ResponseBody
    public List<ProductCommentDTO> getCommentList(@RequestParam("product_num") int productNum) {
        return mapper.getCommentsByProduct(productNum);
    }

    @PostMapping("product_comment_insert.go")
    @ResponseBody
    public String insertComment(ProductCommentDTO commentDTO) {
        mapper.insertProductComment(commentDTO);
        return "success";
    }
    
    @PostMapping("/product_comment_delete.go")
    @ResponseBody
    public String deleteProductComment(@RequestParam("comment_id") int commentId) {
        mapper.deleteProductComment(commentId);
        return "success";
    }

    @PostMapping("/product_comment_update.go")
    @ResponseBody
    public String updateProductComment(@RequestParam("comment_id") int commentId,
                                       @RequestParam("comment_content") String commentContent) {
        mapper.updateProductComment(commentId, commentContent);
        return "success";
    }





