
--------------------------------------------- 추가 ------------------------------------------------

private boolean isValidUserId(String userId) {
	    return userId != null && userId.matches("^[a-zA-Z0-9]{6,12}$");
	}

	private boolean isValidPassword(String password) {
	    return password != null && password.matches("^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[\\W_]).{8,16}$");
	}
	
	private boolean isValidKoreanName(String name) {
	    return name != null && name.matches("^[가-힣]+$");
	}
---------------------------------------------------------------------------------------------------


 --------------------------------------------- 수정 -----------------------------------------------
	@PostMapping("/sign_up_ok.go")
	public void signupUser(UserDTO dto,
	        @RequestParam("email_id") String emailId,
	        @RequestParam("email_domain") String emailDomain,
	        @RequestParam(value = "email_custom", required = false) String emailCustom,
	        @RequestParam("phone1") String phone1,
	        @RequestParam("phone2") String phone2,
	        @RequestParam("phone3") String phone3,
	        @RequestParam("user_pwd_confirm") String user_pwd_confirm,
	        HttpServletResponse response) throws IOException {
	    response.setContentType("text/html; charset=UTF-8");
	    PrintWriter out = response.getWriter();
	    
	    if (!isValidUserId(dto.getUser_id())) {
	        out.println("<script>");
	        out.println("alert('아이디는 6~12자, 영문과 숫자가 포함되어야 합니다.');");
	        out.println("history.back();");
	        out.println("</script>");
	        return;
	    }

	    if (!isValidPassword(dto.getUser_pwd())) {
	        out.println("<script>");
	        out.println("alert('비밀번호는 8~16자리이면서 영문자, 숫자, 특수문자를 모두 포함해야 합니다.');");
	        out.println("history.back();");
	        out.println("</script>");
	        return;
	    }
	    
	    if (!dto.getUser_pwd().equals(user_pwd_confirm)) {
	        out.println("<script>");
	        out.println("alert('비밀번호를 정확히 입력했는지 확인해주세요!');");
	        out.println("history.back();");
	        out.println("</script>");
	        return;
	    }
	    
	    if (!isValidKoreanName(dto.getUser_name())) {
	        out.println("<script>");
	        out.println("alert('이름은 한글만 입력 가능합니다.');");
	        out.println("history.back();");
	        out.println("</script>");
	        return;
	    }
	    
	    String domain = "direct".equals(emailDomain) && emailCustom != null && !emailCustom.trim().isEmpty()
	            ? emailCustom.trim()
	            : emailDomain;

	    dto.setUser_email(emailId + "@" + domain);

	    dto.setUser_phone(phone1 + "-" + phone2 + "-" + phone3);

	    UserDTO duplicateUser = mapper.findId(dto.getUser_id());
	    if (duplicateUser != null) {
	        out.println("<script>");
	        out.println("alert('이미 사용 중인 아이디입니다.');");
	        out.println("history.back();");
	        out.println("</script>");
	        return;
	    }

	    int check = this.mapper.insertUser(dto);

	    if(check > 0) {
	        out.println("<script>");
	        out.println("alert('회원 등록 성공!!!');");
	        out.println("location.href='/'");
	        out.println("</script>");
	    } else {
	        out.println("<script>");
	        out.println("alert('회원 등록 실패!');");
	        out.println("history.back();");
	        out.println("</script>");
	    }

	}
