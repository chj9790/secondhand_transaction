@GetMapping("/")
	public String main(@RequestParam(value = "page", defaultValue = "1") int page,
			Model model) {
	
 		totalRecord = this.mapper.products_count();
		
		PageDTO pdto = new PageDTO(page, rowsize, totalRecord);
	
		List<ProductDTO> productlist = mapper.product_list(pdto);  // 전체 제품
		
		List<CategoryDTO> category = mapper.category_list();
		
		model.addAttribute("productList", productlist)
			.addAttribute("areas", areas)
			.addAttribute("paging", pdto)	
			.addAttribute("category", category);
		
		return "main";
		
	}
 	
 	@GetMapping("secondhand_list.go")
 	public String secondhandList(
 	        @RequestParam(value = "area", required = false) String area,
 	        @RequestParam(value = "category", required = false) String category,
 	        @RequestParam(value = "keyword", required = false) String keyword,
 	        @RequestParam(value = "minPrice", required = false) Integer minPrice,
 	        @RequestParam(value = "maxPrice", required = false) Integer maxPrice,
 	        @RequestParam(value = "page", defaultValue = "1") int page,
 	        Model model
 	) {
 	    List<String> areasToShow = this.areas;  // 기본 전체 지역 리스트
 	    String selectedArea = area; // 서버에서 더 이상 파싱하지 않고 그대로 사용

 	    // 필터링 파라미터
 	    Map<String, Object> map = new HashMap<>();
 	    map.put("dong", selectedArea); // 여기서 그대로 넘어감
 	    map.put("category", category);
 	    map.put("keyword", keyword);
 	    map.put("minPrice", minPrice);
 	    map.put("maxPrice", maxPrice);

 	    totalRecord = mapper.products_search_count(map);
 	    PageDTO pdto = new PageDTO(page, rowsize, totalRecord, selectedArea, category, keyword, minPrice, maxPrice);
 	    List<ProductDTO> productList = mapper.products_search_list(pdto);
 	    List<CategoryDTO> categorylist = mapper.category_list();

 	    model.addAttribute("areas", areasToShow);
 	    model.addAttribute("area", selectedArea);
 	    model.addAttribute("productList", productList);
 	    model.addAttribute("categorylist", categorylist);
 	    model.addAttribute("category", category);
 	    model.addAttribute("paging", pdto);
 	    model.addAttribute("minPrice", minPrice);
 	    model.addAttribute("maxPrice", maxPrice);
 	    model.addAttribute("keyword", keyword);

 	    return "product_search_list";
 	}



// 위치 관련 컨트롤
    
    
    @GetMapping("/region/search")
    @ResponseBody
    public List<RegionCodeDTO> searchByAddress(@RequestParam ("address") String address	) {
        return mapper.findRegionsByAddress(address);
    }


______________________________________________________________________________________________________________________________________________



package com.boot.transaction.model;

import lombok.Data;

@Data
public class RegionCodeDTO {
	
	
	private String code;
	private String name;
	private String is_active;

}

______________________________________________________________________________________________________________________________________________


// 위치관련 
		List<RegionCodeDTO> findRegionsByAddress(@Param("address") String address);
		
		List<String> getDongListByGu(@Param("guName") String guName);
		
		String getGuByDong(@Param("dongName") String dongName);
	


______________________________________________________________________________________________________________________________________________


<!-- 지역 대조검색 기능 추가 !! -->
	
	<select id="findRegionsByAddress" parameterType="string" resultType="Region">
	    SELECT code, name, is_active
	    FROM region_codes
	    WHERE name LIKE '%' || #{address} || '%'
	      AND is_active = 'Y'
	</select>



______________________________________________________________________________________________________________________________________________



<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %> 
<%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt" %>
<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>중고 전자기기 목록</title>
<style>
    body {
	    font-family: 'Segoe UI', sans-serif;
	    background-color: #f4f7fb;
	    margin: 0;
	    padding: 0;
	}
	
	.main-container {
	    display: flex;
	}

    .sidebar {
        width: 15%;
        padding: 20px;
        background-color: #ffffff;
        border-right: 1px solid #ddd;
        overflow-y: auto;
    }

    .sidebar h3 {
        font-size: 16px;
        margin-bottom: 10px;
    }

    .sidebar label {
        display: block;
        margin-bottom: 6px;
        font-size: 14px;
    }

    .content {
        flex: 1;
        padding: 20px;
    }

    .top-bar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .search-bar input[type="text"] {
        width: 250px;
        padding: 8px 12px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .search-bar input[type="submit"] {
        padding: 8px 16px;
        background-color: #2b7cff;
        color: white;
        border: none;
        border-radius: 5px;
        margin-left: 8px;
        cursor: pointer;
    }

    .product-count {
        font-size: 15px;
        color: #555;
        margin-right: 10px;
    }

    .product-count strong {
        color: #2b7cff;
    }

    .product-list { 
	    display: flex; 
	    flex-wrap: wrap; 
	    gap: 20px; 
    } 
    
    .product-card { 
	    flex: 0 0 calc(20% - 20px); 
	    background: white; 
	    border-radius: 10px; 
	    display: flex; 
	    flex-direction: column; 
	    padding: 12px; 
	    box-shadow: 1px 2px 5px rgba(0,0,0,0.05); 
	    transition: 0.2s ease; 
	    box-sizing: border-box; 
	    min-width: 200px; 
    } 
    
    .product-img-wrapper {
	    position: relative; 
	    width: 100%; 
	    padding-top: 100%;  /* 정사각형 비율 유지 */
	    overflow: hidden; 
	    border-radius: 8px; 
	    border: 1px solid #ddd;
	    background: #fafafa;
    } 
    
    .product-img { 
	    position: absolute; 
	    top: 0; 
	    left: 0; 
	    width: 100%; 
	    height: 100%; 
	    object-fit: cover; 
	    border-radius: 8px; 
    }


	.no-product {
	    width: 100%;
	    text-align: center;
	    padding: 60px 0;
	    font-size: 20px;
	    font-weight: 500;
	    color: #777;
	}

	.sold-out {
	    opacity: 0.4;
	    filter: grayscale(50%);
	}
	
	.status-overlay {
	    position: absolute;
	    top: 50%;
	    left: 50%;
	    transform: translate(-50%, -50%);
	    font-weight: bold;
	    font-size: 18px;
	    padding: 4px 12px;
	    border-radius: 6px;
	    background-color: rgba(255, 255, 255, 0.8);
	}
	
	.sold-text {
	    color: red;
	}
	
	.reserved-text {
	    color: green;
	}

    .product-info {
        margin-top: 10px;
    }

    .product-info a {
        font-size: 18px;
        font-weight: 600;
        color: #2a2a2a;
        text-decoration: none; 
		display: block;            
		width: 100%;               
		white-space: nowrap;     
		overflow: hidden;        
		text-overflow: ellipsis;   
    }

    .product-info a:hover {
        text-decoration: underline;
    }

    .product-meta {
        color: #666;
        font-size: 14px;
        margin-top: 6px;
		display: block;            
		width: 100%;               
		white-space: nowrap;     
		overflow: hidden;        
		text-overflow: ellipsis;   
    }

    .product-price {
        font-weight: bold;
        margin-top: 4px;
        font-size: 16px;
        color: #4e8fe1;
    }

    .settings-btn {
        background-color: #dbe7ff;
        border: none;
        padding: 8px 16px;
        border-radius: 5px;
        cursor: pointer;
    }

    .pagination-wrapper {
        margin: 30px 0;
    }

    .pagination {
        display: inline-flex;
        gap: 6px;
        padding: 10px 20px;
        border-radius: 12px;
        background-color: #f2f7fd;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    }

    .page-btn {
        display: inline-block;
        padding: 8px 14px;
        font-size: 14px;
        font-weight: 500;
        color: #2b7cff;
        background-color: white;
        border: 1px solid #b3d3ff;
        border-radius: 8px;
        text-decoration: none;
        transition: all 0.2s ease;
    }

    .page-btn:hover {
        background-color: #dceaff;
    }

    .page-btn.active {
        background-color: #2b7cff;
        color: white;
        border-color: #2b7cff;
    }

    .page-btn.first,
    .page-btn.last {
        font-weight: bold;
    }
    
	.product-card:hover {
	    background-color: #eef4ff;
	    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
	}
	
	.region-select {
        width: 100%;
        padding: 8px 10px;
        margin-bottom: 12px;
        border: 1px solid #ccc;
        border-radius: 5px;
        background: #fff;
        font-size: 14px;
    }
    
    input[type=number]::-webkit-inner-spin-button,
    input[type=number]::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    input[type=number] {
        -moz-appearance: textfield; /* Firefox */
    }
</style>

<script>
document.addEventListener("DOMContentLoaded", function () {
	  
  // 가격 검색 최솟값 설정
  const minPriceInput = document.getElementById("minPrice");
  const maxPriceInput = document.getElementById("maxPrice");

  if(minPriceInput && maxPriceInput){
    minPriceInput.addEventListener("input", () => {
      const minVal = parseFloat(minPriceInput.value) || 0;
      maxPriceInput.min = Math.max(0, minVal);
    });
  }

  // 카테고리 초기화 함수
  function resetCategory() {
    const form = document.forms[0];
    if (!form) return;
	
    const categoryInputs = form.querySelectorAll('input[name="category"]');
    categoryInputs.forEach(input => input.checked = false);

    const url = new URL(form.action, window.location.origin);
    const params = new URLSearchParams(new FormData(form));
    params.delete('category');
    window.location.href = url.pathname + '?' + params.toString();
  }
  window.resetCategory = resetCategory;

  // 무료나눔 버튼
  function submitFreeShare() {
    const form = document.forms[0];
    if (!form) return;

    const minInput = form.querySelector('input[name="minPrice"]');
    const maxInput = form.querySelector('input[name="maxPrice"]');

    if (minInput) minInput.value = "";   // 최소가격 초기화
    if (maxInput) maxInput.value = "0";  // 무료나눔은 최대가격 0으로

    form.submit();
  }
  window.submitFreeShare = submitFreeShare;
});
</script>

</head>
<body>

	<jsp:include page="include/header.jsp" />
	
	<div class="main-container">
		<div class="sidebar">
		    <form id="filterForm" method="get" action="secondhand_list.go">
		      <h3>지역 선택</h3>
		      	<div id="area-radios">
		      	<label>
				  <input type="radio" name="area" value="" onchange="this.form.submit()" <c:if test="${empty area}">checked</c:if> >
						  전체보기
				</label>
				<c:forEach var="a" items="${areas}">
				    <label>
				        <input type="radio" name="area" value="${a}"
				               onchange="this.form.submit()"
				               <c:if test="${area == a}">checked</c:if>> ${a}
				    </label>
				</c:forEach>
				</div>
				
				<button type="button" id="btnUseMyLocation" style="margin-top:10px; padding:5px 10px;">우리 동네 보기</button>

		        <hr>
		        <h3>카테고리</h3>
		        <c:forEach var="c" items="${category}">
		            <label>
		                <input type="radio" name="category" value="${c.category_code}" onchange="this.form.submit()">
		                <c:if test="${empty selectedCategory and empty c.category_code}">checked</c:if>  
		                <c:if test="${selectedCategory == c.category_code }">checked</c:if>
		                ${c.category_name}
		            </label>
		        </c:forEach>
		        
		        <!-- 카테고리 초기화 버튼 -->
				<div style="margin-top: 10px;">
				    <button type="button" onclick="resetCategory()" style="margin-top: 10px; width: 50%; background-color: #2b7cff; color: white; border: none; padding: 5px; border-radius: 6px; cursor: pointer;">
				        카테고리 초기화
				    </button>
				</div>

		        <hr>
		        <h3>가격 범위</h3>
				<input type="number" id="minPrice" name="minPrice" placeholder="최소가격" 
				       value="${minPrice}" min="0" step="any"
				       style="width: 33%; margin-bottom: 8px;" /> ~
				
				<input type="number" id="maxPrice" name="maxPrice" placeholder="최대가격" 
				       value="${maxPrice}" min="0" step="any"
				       style="width: 33%; margin-bottom: 8px;" />
			       		       

			    <!-- 무료나눔 버튼 -->
				<div style="margin-top: 10px;">
				    <button type="button" onclick="submitFreeShare()"
				        style="width: 30%; background-color: #28a745; color: white; border: none; padding: 5px; border-radius: 6px; cursor: pointer;">
				        무료나눔
				    </button>
				</div>
		
		        <input type="submit" value="가격 검색" style="margin-top: 10px; width: 50%; background-color: #2b7cff; color: white; border: none; padding: 5px; border-radius: 6px; cursor: pointer;"/>
		    </form>
		</div>
		
		<div class="content">
		    <h1>중고 전자기기</h1>
		
		    <div class="top-bar">
		        <form class="search-bar" method="get" action="secondhand_list.go">
		            <input type="text" name="keyword" placeholder="제품명을 입력하세요">
		            <input type="submit" value="검색">
		        </form>
		
		        <div style="display: flex; align-items: center; gap: 20px;">
		            <div class="product-count">총 <strong>${paging.totalRecord}</strong>개 상품</div>
		        </div>
		    </div>
		
		    <div class="product-list">
		        <c:if test="${empty productList}">
		            <div class="no-product">
		                상품이 없습니다.
		            </div>
		        </c:if>

		        <c:forEach var="p" items="${productList}">
		        	<c:set var="imgList" value="${fn:split(p.product_img, ',')}" />
		            <div class="product-card" onclick="location.href='product_detail.go?product_num=${p.product_num}'" style="cursor: pointer;">
					    <div class="product-img-wrapper">
					        <img src="<%=request.getContextPath() %>/resources/upload/${imgList[0]}"
					             class="product-img <c:if test='${p.product_status == "판매완료"}'>sold-out</c:if>">
					        
					        <c:choose>
					            <c:when test="${p.product_status == '판매완료'}">
					                <div class="status-overlay sold-text">판매완료</div>
					            </c:when>
					            <c:when test="${p.product_status == '예약중'}">
					                <div class="status-overlay reserved-text">예약중</div>
					            </c:when>
					        </c:choose>
					    </div>
					
					    <div class="product-info">
					        <a href="product_detail.go?product_num=${p.product_num}">${p.product_title}</a>
					        <fmt:formatDate value="${p.product_date}" pattern="YYYY-MM-dd · a h:mm" var="formattedTime" />
					        <div class="product-meta">${p.sales_area}</div>
					        <div class="product-meta">${formattedTime}</div>
					        <div class="product-price">
					            <c:choose>
					                <c:when test="${p.sales_price == 0}">
					                    무료 나눔
					                </c:when>
					                <c:otherwise>
					                    <fmt:formatNumber value="${p.sales_price}" type="number" />원
					                </c:otherwise>
					            </c:choose>
					        </div>
					    </div>
					</div>
		        </c:forEach>
		    </div>
		
		    <br><br>
		
		    <div class="pagination-wrapper" align="center">
		        <div class="pagination">
		            <c:if test="${paging.page > paging.block}">
		                <a href="?page=1" class="page-btn first">처음</a>
		                <a href="?page=${paging.startBlock - 1}" class="page-btn">◀</a>
		            </c:if>
		
		            <c:forEach begin="${paging.startBlock}" end="${paging.endBlock}" var="i">
		                <c:choose>
		                    <c:when test="${i == paging.page}">
		                        <a href="?page=${i}" class="page-btn active">${i}</a>
		                    </c:when>
		                    <c:otherwise>
		                        <a href="?page=${i}" class="page-btn">${i}</a>
		                    </c:otherwise>
		                </c:choose>
		            </c:forEach>
		
		            <c:if test="${paging.endBlock < paging.allPage}">
		                <a href="?page=${paging.endBlock + 1}" class="page-btn">▶</a>
		                <a href="?page=${paging.allPage}" class="page-btn last">마지막</a>
		            </c:if>
		        </div>
		    </div>
		
		</div>
	</div>

	<jsp:include page="include/footer.jsp" />
	
	<script>
  // 위치 가져오기 (기존 getUserLocation 함수)
  function getUserLocation() {
    return new Promise((resolve, reject) => {
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          pos => resolve({lat: pos.coords.latitude, lng: pos.coords.longitude}),
          err => reject(err),
          {enableHighAccuracy:true, timeout:5000}
        );
      } else {
        reject(new Error("브라우저가 위치 정보를 지원하지 않습니다."));
      }
    });
  }

  // 구글 지오코딩으로 동(면,리) 목록 가져오기 (기존 fetchDongListByCoords 함수)
  async function fetchDongListByCoords(lat, lng) {
    const geocoder = new google.maps.Geocoder();
    return new Promise((resolve, reject) => {
      geocoder.geocode({location: {lat, lng}}, (results, status) => {
        if (status === "OK" && results.length > 0) {
          let guName = null;
          for(let r of results) {
            const guMatch = r.formatted_address.match(/([가-힣]+(구|군))/);
            if(guMatch){
              guName = guMatch[1];
              break;
            }
          }
          if(!guName){
            reject("구(군) 이름을 찾을 수 없습니다.");
            return;
          }
          // 서버 API 주소 맞게 변경 필요
          fetch('/region/search?address=' + encodeURIComponent(guName))
            .then(res => res.json())
            .then(data => {
              const dongNames = data
                .map(item => {
                  const match = item.name.match(/([가-힣]+(동|면|리))$/);
                  return match ? match[1] : null;
                })
                .filter(name => name !== null);
              resolve(dongNames);
            })
            .catch(e => reject(e));
        } else {
          reject("지오코딩 실패: " + status);
        }
      });
    });
  }
  
  const selectedArea = "<c:out value='${area}' default='' />";

  document.addEventListener('DOMContentLoaded', () => {
	    const btn = document.getElementById('btnUseMyLocation');
	    const areaRadioList = document.getElementById('area-radios');
	    const filterForm = document.getElementById('filterForm');

	    // 기본 지역 목록 (초기 라디오 버튼 value들)
	    const defaultAreas = [...areaRadioList.querySelectorAll('input[name="area"]')].map(input => input.value);

	    let useMyLocationMode = false;  // 현재 토글 상태

	    function renderAreaRadios(areaList) {
	      areaRadioList.innerHTML = '';
	      areaList.forEach(area => {
	        const label = document.createElement('label');
	        const input = document.createElement('input');
	        input.type = 'radio';
	        input.name = 'area';
	        input.value = area;
	        if (area === selectedArea) {
	          input.checked = true;
	        }
	        input.onchange = () => filterForm.submit();

	        label.appendChild(input);
	        label.appendChild(document.createTextNode(' ' + area));
	        areaRadioList.appendChild(label);
	      });
	    }

	    async function setMyLocationAreas() {
	      areaRadioList.innerHTML = '<p>위치 정보를 가져오는 중...</p>';
	      try {
	        const {lat, lng} = await getUserLocation();
	        const dongList = await fetchDongListByCoords(lat, lng);

	        if (dongList.length === 0) {
	          areaRadioList.innerHTML = '<p>동(면,리) 정보를 찾을 수 없습니다.</p>';
	          return;
	        }
	        renderAreaRadios(dongList);
	      } catch (e) {
	        console.error(e);
	        areaRadioList.innerHTML = '<p>위치 정보를 가져오지 못했습니다. 직접 선택해주세요.</p>';
	      }
	    }

	    btn.addEventListener('click', async () => {
	      if (!useMyLocationMode) {
	        await setMyLocationAreas();
	        btn.textContent = '전체 지역 보기';
	        useMyLocationMode = true;
	      } else {
	        renderAreaRadios(defaultAreas);
	        btn.textContent = '우리 동네 보기';
	        useMyLocationMode = false;
	      }
	    });
	  });
</script>
	
	 <script
      src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC6GZL5JoPGTDsQqjhGD-dgKj7hRQSTxfE&"
      async defer>
    </script>

</body>
</html>



______________________________________________________________________________________________________________________________________________

 <script>
     function initMap() {
    	  
    	    console.log("[initMap] 함수 시작");

    	    const locDiv = document.getElementById("user-location");
    	    console.log("[initMap] locationEl (at initMap start):", locDiv);

    	    if (locDiv) {
    	        locDiv.textContent = "현재 위치: 위치 정보를 가져오는 중...";
    	        console.log("[initMap] 위치 정보를 가져오는 중... 텍스트 설정 완료");
    	    }

    	    if (navigator.geolocation) {
    	        console.log("[initMap] navigator.geolocation 사용 가능");
    	        navigator.geolocation.getCurrentPosition(
    	            pos => {
    	                const lat = pos.coords.latitude;
    	                const lng = pos.coords.longitude;
    	                console.log("[initMap] 위치 정보 획득:", lat, lng);
    	                getAddressFromCoords(lat, lng);
    	            },
    	            err => {
    	                console.error("[initMap] 위치 접근 실패:", err.message);
    	                if (locDiv) {
    	                    locDiv.textContent = `위치 정보 접근 실패: ${err.message}`;
    	                    if (err.code === err.PERMISSION_DENIED) {
    	                        locDiv.textContent = "위치 정보 접근이 거부되었습니다. 브라우저 설정에서 위치 권한을 허용해주세요.";
    	                    }
    	                }
    	            },
    	            { enableHighAccuracy: true, timeout: 5000, maximumAge: 0 }
    	        );
    	    } else {
    	        console.log("[initMap] 현재 브라우저에서 위치 정보 기능 미지원");
    	        if (locDiv) {
    	            locDiv.textContent = "현재 브라우저에서 위치 정보 기능을 지원하지 않습니다.";
    	        }
    	    }
    	    console.log("[initMap] 함수 종료");
    	}

     function getAddressFromCoords(lat, lng) {
         console.log("[getAddressFromCoords] 호출됨, 좌표:", lat, lng);
         const geocoder = new google.maps.Geocoder();
         const latlng = { lat: parseFloat(lat), lng: parseFloat(lng) };
         const locationEl = document.getElementById("user-location");

         geocoder.geocode({ location: latlng }, (results, status) => {
             console.log("[getAddressFromCoords] geocode 결과 수:", results.length, "상태:", status);
             if (status === "OK" && results.length > 5) {
                 let fullAddress = results[5].formatted_address;
                 fullAddress = fullAddress.replace('대한민국 ', '');
                 
                 if (locationEl) {
                     locationEl.innerHTML = "현재 위치: <strong>" + fullAddress + "</strong>";
                     window.userLocationFullAddress = fullAddress;
                     console.log("[getAddressFromCoords] 위치 텍스트 업데이트 완료:", fullAddress);

                     // 구 이름만 추출하기
                     const guName = extractGuName(fullAddress);
						if (guName) {
						    console.log("[getAddressFromCoords] 추출된 구 이름:", guName);
						    // 문자열 연결로 변경
						    fetch('/region/search?address=' + encodeURIComponent(guName))
						    .then(res => {
						        console.log("[fetch] 서버 응답 상태:", res.status);
						        return res.json();
						    })
						    .then(data => {
						       
						    	 const dongNames = data
						         .map(item => {
						           // item.name 에서 '동'으로 끝나는 부분만 추출 (ex: '경기도 고양시 일산동구 식사동' -> '식사동')
						           const match = item.name.match(/([가-힣]+(동|면|리))$/);
						           return match ? match[1] : null;
						         })
						         .filter(name => name !== null);

						       console.log("[fetch] 동 이름 목록:", dongNames);
						        
						        
						        
						        
						        // TODO: 받은 data를 UI에 반영하는 코드 작성
						    })
						    .catch(err => {
						        console.error("[fetch] 에러 발생:", err);
						    });
						} else {
						    console.warn("[getAddressFromCoords] 구 이름 추출 실패");
						}
                 }
             } else {
                 console.error("[getAddressFromCoords] Geocoder 실패 상태:", status);
             }
         });
     }
     
     
     function extractGuName(fullAddress) {
         console.log("[extractGuName] 호출됨, fullAddress:", fullAddress);
         const guMatch = fullAddress.match(/([가-힣]+(구|군))/);
         if (guMatch) {
             console.log("[extractGuName] 구 이름 추출 성공:", guMatch[1]);
             return guMatch[1];
         } else {
             console.warn("[extractGuName] 구 이름 추출 실패");
             return null;
         }
     }

    	function getUserLocationText() {
    	    console.log("[getUserLocationText] 호출됨");
    	    const locEl = document.getElementById('user-location');
    	    if (!locEl) {
    	        console.log("[getUserLocationText] 위치 요소가 없음");
    	        return null;
    	    }
    	    const text = locEl.textContent || locEl.innerText || "";
    	    const prefix = "현재 위치: ";
    	    if (text.startsWith(prefix)) {
    	        const result = text.substring(prefix.length).trim();
    	        console.log("[getUserLocationText] 위치 텍스트 추출 성공:", result);
    	        return result;
    	    }
    	    console.log("[getUserLocationText] 위치 텍스트가 예상 형식이 아님");
    	    return null;
    	}
    	
    	
    	
    	
    	window.onload = function() {
    	    initMap();
    	};
      

    </script>




______________________________________________________________________________________________________________________________________________




<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %> 
<%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt" %>
<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>중고 전자기기 목록</title>
<style>
body {
	    font-family: 'Segoe UI', sans-serif;
	    background-color: #f4f7fb;
	    margin: 0;
	    padding: 0;
	}
	
	.main-container {
	    display: flex;
	}

    .sidebar {
        width: 15%;
        padding: 20px;
        background-color: #ffffff;
        border-right: 1px solid #ddd;
        overflow-y: auto;
    }

    .sidebar h3 {
        font-size: 16px;
        margin-bottom: 10px;
    }

    .sidebar label {
        display: block;
        margin-bottom: 6px;
        font-size: 14px;
    }

    .content {
        flex: 1;
        padding: 20px;
    }

    .top-bar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .search-bar input[type="text"] {
        width: 250px;
        padding: 8px 12px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .search-bar input[type="submit"] {
        padding: 8px 16px;
        background-color: #2b7cff;
        color: white;
        border: none;
        border-radius: 5px;
        margin-left: 8px;
        cursor: pointer;
    }

    .product-count {
        font-size: 15px;
        color: #555;
        margin-right: 10px;
    }

    .product-count strong {
        color: #2b7cff;
    }

    .product-list { 
	    display: flex; 
	    flex-wrap: wrap; 
	    gap: 20px; 
    } 
    
    .product-card { 
	    flex: 0 0 calc(20% - 20px); 
	    background: white; 
	    border-radius: 10px; 
	    display: flex; 
	    flex-direction: column; 
	    padding: 12px; 
	    box-shadow: 1px 2px 5px rgba(0,0,0,0.05); 
	    transition: 0.2s ease; 
	    box-sizing: border-box; 
	    min-width: 200px; 
    } 
    
    .product-img-wrapper {
	    position: relative; 
	    width: 100%; padding-top: 100%; 
	    overflow: hidden; 
	    border-radius: 8px; 
    } 
    
    .product-img { 
	    position: absolute; 
	    top: 0; left: 0; width: 100%; 
	    height: 100%; object-fit: cover; 
	    border: 1px solid #ddd; 
	    border-radius: 8px; 
    }

	.no-product {
	    width: 100%;
	    text-align: center;
	    padding: 60px 0;
	    font-size: 20px;
	    font-weight: 500;
	    color: #777;
	}
	
	
	.sold-out {
	    opacity: 0.4;
	    filter: grayscale(50%);
	}
	
	.status-overlay {
	    position: absolute;
	    top: 50%;
	    left: 50%;
	    transform: translate(-50%, -50%);
	    font-weight: bold;
	    font-size: 18px;
	    padding: 4px 12px;
	    border-radius: 6px;
	    background-color: rgba(255, 255, 255, 0.8);
	}
	
	.sold-text {
	    color: red;
	}
	
	.reserved-text {
	    color: green;
	}

    .product-info {
        margin-top: 10px;
    }

    .product-info a {
        font-size: 18px;
        font-weight: 600;
        color: #2a2a2a;
        text-decoration: none; 
		display: block;            
		width: 100%;               
		white-space: nowrap;     
		overflow: hidden;        
		text-overflow: ellipsis;   
    }

    .product-info a:hover {
        text-decoration: underline;
    }

    .product-meta {
        color: #666;
        font-size: 14px;
        margin-top: 6px;
		display: block;            
		width: 100%;               
		white-space: nowrap;     
		overflow: hidden;        
		text-overflow: ellipsis;   
    }

    .product-price {
        font-weight: bold;
        margin-top: 4px;
        font-size: 16px;
        color: #4e8fe1;
    }

    .settings-btn {
        background-color: #dbe7ff;
        border: none;
        padding: 8px 16px;
        border-radius: 5px;
        cursor: pointer;
    }

    .pagination-wrapper {
        margin: 30px 0;
    }

    .pagination {
        display: inline-flex;
        gap: 6px;
        padding: 10px 20px;
        border-radius: 12px;
        background-color: #f2f7fd;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    }

    .page-btn {
        display: inline-block;
        padding: 8px 14px;
        font-size: 14px;
        font-weight: 500;
        color: #2b7cff;
        background-color: white;
        border: 1px solid #b3d3ff;
        border-radius: 8px;
        text-decoration: none;
        transition: all 0.2s ease;
    }

    .page-btn:hover {
        background-color: #dceaff;
    }

    .page-btn.active {
        background-color: #2b7cff;
        color: white;
        border-color: #2b7cff;
    }

    .page-btn.first,
    .page-btn.last {
        font-weight: bold;
    }
    
	.product-card:hover {
	    background-color: #eef4ff;
	    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
	}
	
	.region-select {
        width: 100%;
        padding: 8px 10px;
        margin-bottom: 12px;
        border: 1px solid #ccc;
        border-radius: 5px;
        background: #fff;
        font-size: 14px;
    }
    
    input[type=number]::-webkit-inner-spin-button,
    input[type=number]::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    input[type=number] {
        -moz-appearance: textfield; /* Firefox */
    }
</style>


<script>
document.addEventListener("DOMContentLoaded", function () {
	  
	  // 가격 검색 최솟값 설정
	  const minPriceInput = document.getElementById("minPrice");
	  const maxPriceInput = document.getElementById("maxPrice");

	  minPriceInput.addEventListener("input", () => {
	    const minVal = parseFloat(minPriceInput.value) || 0;
	    maxPriceInput.min = Math.max(0, minVal);
	  });

// 카테고리 초기화 함수
function resetCategory() {
  const form = document.forms[0];
  if (!form) return;
	
  // 카테고리 초기화 버튼
  const categoryInputs = form.querySelectorAll('input[name="category"]');
  categoryInputs.forEach(input => input.checked = false);

  const url = new URL(form.action, window.location.origin);
  const params = new URLSearchParams(new FormData(form));
  params.delete('category');
  window.location.href = url.pathname + '?' + params.toString();
}
window.resetCategory = resetCategory;

// 무료나눔 클릭 시 기존의 가격검색 초기화
function submitFreeShare() {
  const form = document.forms[0];
  if (!form) return;

  const minInput = form.querySelector('input[name="minPrice"]');
  const maxInput = form.querySelector('input[name="maxPrice"]');

  if (minInput) minInput.value = "";   // 최소가격 초기화
  if (maxInput) maxInput.value = "0";  // 무료나눔은 최대가격 0으로

  form.submit();
}

window.submitFreeShare = submitFreeShare;

});
</script>


</head>
<body>


		<jsp:include page="include/header.jsp" />

	
	<div class="main-container">
		<div class="sidebar">
		     <form id="filterForm" method="get" action="secondhand_list.go">
            <h3>지역 선택</h3>
            <div id="area-radios"></div>
            <button type="button" id="btnUseMyLocation" style="margin-top:10px; padding:5px 10px;">우리 동네 보기</button>

		        <hr>
		        <h3>카테고리</h3>
		        <c:forEach var="c" items="${categorylist}">
		            <label>
		                <input type="radio" name="category" value="${c.category_code}"
		                       onchange="this.form.submit()"
		                       <c:if test="${category == c.category_code}">checked</c:if>>
		                ${c.category_name}
		            </label>
		        </c:forEach>
		        
		         <!-- 카테고리 초기화 버튼 -->
			<div style="margin-top: 10px;">
			    <button type="button" onclick="resetCategory()"style="margin-top: 10px; width: 50%; background-color: #2b7cff; color: white; border: none; padding: 5px; border-radius: 6px; cursor: pointer;">카테고리 초기화</button>
			</div>


		        <hr>

		        <h3>가격 범위</h3>
			<input type="number" id="minPrice" name="minPrice" placeholder="최소가격" 
			       value="${minPrice}" min="0" step="any"
			       style="width: 33%; margin-bottom: 8px;" /> ~
			
			<input type="number" id="maxPrice" name="maxPrice" placeholder="최대가격" 
			       value="${maxPrice}" min="0" step="any"
			       style="width: 33%; margin-bottom: 8px;" />
			       
			       
			       <!-- 무료나눔 버튼 -->
<div style="margin-top: 10px;">
    <button type="button" onclick="submitFreeShare()"
        style="width: 30%; background-color: #28a745; color: white; border: none; padding: 5px; border-radius: 6px; cursor: pointer;">
        무료나눔
    </button>
</div>
				
				<input type="submit" value="가격 검색"
				       style="margin-top: 10px; width: 50%; background-color: #2b7cff; color: white; border: none; padding: 5px; border-radius: 6px; cursor: pointer;" />
					
	
		    </form>
		</div>
		
		<div class="content">
		    <h1>중고 전자기기</h1>
		
		    <div class="top-bar">
		        <form class="search-bar" method="get" action="secondhand_list.go">
		            <input type="text" name="keyword" placeholder="제품명을 입력하세요" value="${keyword}">
		            <c:if test="${not empty area}">
		                <input type="hidden" name="area" value="${area}">
		            </c:if>
		            <c:if test="${not empty category}">
		                <input type="hidden" name="category" value="${category}">
		            </c:if>
		            <c:if test="${not empty minPrice}">
		                <input type="hidden" name="minPrice" value="${minPrice}">
		            </c:if>
		            <c:if test="${not empty maxPrice}">
		                <input type="hidden" name="maxPrice" value="${maxPrice}">
		            </c:if>
		            <input type="submit" value="검색">
		        </form>

		        <div style="display: flex; align-items: center; gap: 20px;">
		            <div class="product-count">총 <strong>${paging.totalRecord}</strong>개 상품</div>
		        </div>
		    </div>
		
		    <div class="product-list">
		        <c:if test="${empty productList}">
		            <div class="no-product">
		                상품이 없습니다.
		            </div>
		        </c:if>

		        <c:forEach var="p" items="${productList}">
		        	<c:set var="imgList" value="${fn:split(p.product_img, ',')}" />
		            <div class="product-card" onclick="location.href='product_detail.go?product_num=${p.product_num}'" style="cursor: pointer;">
					    <div class="product-img-wrapper">
					        <img src="<%=request.getContextPath() %>/resources/upload/${imgList[0]}"
					             class="product-img <c:if test='${p.product_status == "판매완료"}'>sold-out</c:if>">
					        
					        <c:choose>
					            <c:when test="${p.product_status == '판매완료'}">
					                <div class="status-overlay sold-text">판매완료</div>
					            </c:when>
					            <c:when test="${p.product_status == '예약중'}">
					                <div class="status-overlay reserved-text">예약중</div>
					            </c:when>
					        </c:choose>
					    </div>
					
					    <div class="product-info">
					        <a href="product_detail.go?product_num=${p.product_num}">${p.product_title}</a>
					        <fmt:formatDate value="${p.product_date}" pattern="YYYY-MM-dd · a h:mm" var="formattedTime" />
					        <div class="product-meta">${p.sales_area}</div>
					        <div class="product-meta">${formattedTime}</div>
					        <div class="product-price">
					            <c:choose>
					                <c:when test="${p.sales_price == 0}">
					                    무료 나눔
					                </c:when>
					                <c:otherwise>
					                    <fmt:formatNumber value="${p.sales_price}" type="number" />원
					                </c:otherwise>
					            </c:choose>
					        </div>
					    </div>
					</div>
		        </c:forEach>
		    </div>

		    <div class="pagination-wrapper" align="center">
		        <div class="pagination">
		            <c:if test="${paging.page > paging.block}">
		                <a href="secondhand_list.go?page=1&area=${area}&category=${category}&keyword=${keyword}&minPrice=${minPrice}&maxPrice=${maxPrice}"  class="page-btn first">처음</a>
		                <a href="secondhand_list.go?page=${paging.startBlock - 1}&area=${area}&category=${category}&keyword=${keyword}&minPrice=${minPrice}&maxPrice=${maxPrice}" class="page-btn">◀</a>
		            </c:if>
		
		            <c:forEach begin="${paging.startBlock}" end="${paging.endBlock}" var="i">
		                <c:choose>
		                    <c:when test="${i == paging.page}">
		                        <a href="#" class="page-btn active">${i}</a>
		                    </c:when>
		                    <c:otherwise>
		                        <a href="secondhand_list.go?page=${i}&area=${area}&category=${category}&keyword=${keyword}&minPrice=${minPrice}&maxPrice=${maxPrice}" class="page-btn">${i}</a>
		                    </c:otherwise>
		                </c:choose>
		            </c:forEach>
		
		            <c:if test="${paging.endBlock < paging.allPage}">
		                <a href="secondhand_list.go?page=${paging.endBlock + 1}&area=${area}&category=${category}&keyword=${keyword}&minPrice=${minPrice}&maxPrice=${maxPrice}" class="page-btn">▶</a>
		                <a href="secondhand_list.go?page=${paging.allPage}&area=${area}&category=${category}&keyword=${keyword}&minPrice=${minPrice}&maxPrice=${maxPrice}" class="page-btn last">마지막</a>
		            </c:if>
		        </div>
		    </div>
		
		</div>
	</div>

<jsp:include page="include/footer.jsp" />

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC6GZL5JoPGTDsQqjhGD-dgKj7hRQSTxfE&" async defer></script>
<script>
document.addEventListener('DOMContentLoaded', () => {
    const btn = document.getElementById('btnUseMyLocation');
    const areaRadioList = document.getElementById('area-radios');
    const filterForm = document.getElementById('filterForm');

    // 서버에서 내려준 기본 지역 배열
    const defaultAreas = [];
    <c:forEach items="${areas}" var="a">
        defaultAreas.push('${a}');
    </c:forEach>

    // 현재 선택된 지역
    let selectedArea = "<c:out value='${param.area}' default='' />";
    let useMyLocationMode = <c:out value='${isDongneMode}' default='false' /> === true;

    // AJAX로 제품 리스트를 갱신
    async function fetchProductList(params) {
        const query = new URLSearchParams(params).toString();
        const response = await fetch('secondhand_list.go?' + query, { method: 'GET' });
        if(!response.ok) throw new Error('서버 요청 실패');

        const htmlText = await response.text();
        // 서버에서 반환되는 HTML에서 product-list 부분만 추출
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = htmlText;
        const newList = tempDiv.querySelector('.product-list');
        document.querySelector('.product-list').innerHTML = newList.innerHTML;
    }

    // 지역 라디오 렌더링
    function updateAreaRadios(areaList) {
        areaRadioList.innerHTML = '';

        // 전체보기
        const labelAll = document.createElement('label');
        const inputAll = document.createElement('input');
        inputAll.type = 'radio';
        inputAll.name = 'area';
        inputAll.value = '';
        inputAll.checked = !selectedArea;
        inputAll.addEventListener('change', () => {
            selectedArea = '';
            triggerFilter();
        });
        labelAll.appendChild(inputAll);
        labelAll.appendChild(document.createTextNode(' 전체보기'));
        areaRadioList.appendChild(labelAll);

        // 동 목록
        areaList.forEach(area => {
            const label = document.createElement('label');
            const input = document.createElement('input');
            input.type = 'radio';
            input.name = 'area';
            input.value = area;
            input.checked = (area === selectedArea);
            input.addEventListener('change', () => {
                selectedArea = area;
                triggerFilter();
            });
            label.appendChild(input);
            label.appendChild(document.createTextNode(' ' + area));
            areaRadioList.appendChild(label);
        });
    }

    // 폼 값 읽어서 AJAX 요청
    function triggerFilter() {
        const params = {
            area: selectedArea,
            category: filterForm.querySelector('input[name="category"]:checked')?.value || '',
            minPrice: filterForm.querySelector('input[name="minPrice"]').value,
            maxPrice: filterForm.querySelector('input[name="maxPrice"]').value,
            keyword: filterForm.querySelector('input[name="keyword"]')?.value || ''
        };
        fetchProductList(params);
    }

    // 사용자 위치 가져오기
    async function getUserLocation() {
        return new Promise((resolve, reject) => {
            if(navigator.geolocation){
                navigator.geolocation.getCurrentPosition(pos => resolve({lat: pos.coords.latitude, lng: pos.coords.longitude}),
                                                        err => reject(err),
                                                        {enableHighAccuracy:true, timeout:5000});
            } else reject(new Error("브라우저가 위치 정보를 지원하지 않습니다."));
        });
    }

    // 위도/경도로 동 리스트 가져오기
    async function fetchDongListByCoords(lat, lng) {
        const geocoder = new google.maps.Geocoder();
        return new Promise((resolve, reject) => {
            geocoder.geocode({location: {lat, lng}}, (results, status) => {
                if(status === "OK" && results.length > 0){
                    let guName = null;
                    for(let r of results){
                        const match = r.formatted_address.match(/([가-힣]+(구|군))/);
                        if(match){ guName = match[1]; break; }
                    }
                    if(!guName){ reject("구(군) 이름을 찾을 수 없습니다."); return; }

                    fetch('/region/search?address=' + encodeURIComponent(guName))
                        .then(res => res.json())
                        .then(data => {
                            const dongList = data.map(item => {
                                const match = item.name.match(/([가-힣]+(동|면|리))$/);
                                return match? match[1] : null;
                            }).filter(n => n !== null);
                            resolve(dongList);
                        })
                        .catch(e => reject(e));
                } else reject("지오코딩 실패: " + status);
            });
        });
    }

    async function setMyLocationAreas() {
        try {
            const {lat, lng} = await getUserLocation();
            const dongList = await fetchDongListByCoords(lat, lng);
            if(dongList.length === 0) {
                alert("동(면,리) 정보를 찾을 수 없습니다.");
                return;
            }
            updateAreaRadios(dongList);
            useMyLocationMode = true;
        } catch(e) {
            console.error(e);
            alert("위치 정보를 가져오지 못했습니다.");
            useMyLocationMode = false;
        }
    }

    btn.addEventListener('click', async () => {
        if(!useMyLocationMode){
            await setMyLocationAreas();
            btn.textContent = '전체 지역 보기';
        } else {
            updateAreaRadios(defaultAreas);
            btn.textContent = '우리 동네 보기';
            useMyLocationMode = false;
        }
    });

    // 초기 렌더링
    updateAreaRadios(defaultAreas);

    // 카테고리, 가격 입력 이벤트도 AJAX로 처리
    filterForm.querySelectorAll('input[name="category"], input[name="minPrice"], input[name="maxPrice"]').forEach(el => {
        el.addEventListener('change', triggerFilter);
    });

    // 검색창 이벤트
    const keywordInput = filterForm.querySelector('input[name="keyword"]');
    if(keywordInput){
        keywordInput.addEventListener('keypress', e => {
            if(e.key === 'Enter'){
                e.preventDefault();
                triggerFilter();
            }
        });
    }
});
</script>

</body>
</html>



________________________________________________________________________________________________





<typeAlias type="com.boot.transaction.model.RegionCodeDTO" alias="Region"/>
