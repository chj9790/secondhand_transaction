@Controller
public class TransactionController {

	@Autowired
	private TransactionMapper mapper;
	
	// 페이지 변수
    private final int rowsize = 10;
    private final int salesRowsize = 5;
 	private int totalRecord = 0;
 	
 	// 기본 카테고리 배열 
 	List<String> areas = Arrays.asList("서울", "부산", "인천", "대구", "대전", "광주", "울산", "세종",
 			"수원", "성남", "고양", "용인", "창원", "청주", "전주", "포항", "천안", "안산", "안양", "남양주");
 	
 		
   
    
 	@GetMapping("/")
	public String main(@RequestParam(value = "page", defaultValue = "1") int page,
			@RequestParam(value = "category_code", required = false) String categoryCode,
			Model model) {
	
		totalRecord = this.mapper.products_count();
				
		PageDTO pdto = new PageDTO(page, rowsize, totalRecord);
	
		List<ProductDTO> productlist;
		
	    if(categoryCode == null || categoryCode.isEmpty()) {
	        productlist = mapper.product_list(pdto);  // 전체 제품
	    } else {
	        productlist = mapper.product_list_by_category(categoryCode);  // 카테고리별 제품
	    }	
		
		List<CategoryDTO> category = mapper.category_list();
		
		model.addAttribute("productList", productlist)
			.addAttribute("areas", areas)
			.addAttribute("paging", pdto)	
			.addAttribute("category", category)
			.addAttribute("selectedCategory", categoryCode);
		
		return "main";
		
	}
 	
 	@GetMapping("secondhand_list.go")
 	public String secondhandList(
 	        @RequestParam(value = "area", required = false) String area,
 	        @RequestParam(value = "category", required = false) String category,
 	        @RequestParam(value = "keyword", required = false) String keyword,
 	        @RequestParam(value = "minPrice", required = false) Integer minPrice,
 	        @RequestParam(value = "maxPrice", required = false) Integer maxPrice,
 	        @RequestParam(value = "page", defaultValue = "1") int page,
 	        Model model
 	) {
 	    List<String> areasToShow = this.areas;  // 기본 전체 지역 리스트
 	    String selectedArea = area; // 서버에서 더 이상 파싱하지 않고 그대로 사용

 	    // 필터링 파라미터
 	    Map<String, Object> map = new HashMap<>();
 	    map.put("dong", selectedArea); // 여기서 그대로 넘어감
 	    map.put("category", category);
 	    map.put("keyword", keyword);
 	    map.put("minPrice", minPrice);
 	    map.put("maxPrice", maxPrice);

 	    totalRecord = mapper.products_search_count(map);
 	    PageDTO pdto = new PageDTO(page, rowsize, totalRecord, selectedArea, category, keyword, minPrice, maxPrice);
 	    List<ProductDTO> productList = mapper.products_search_list(pdto);
 	    List<CategoryDTO> categorylist = mapper.category_list();

 	    model.addAttribute("areas", areasToShow);
 	    model.addAttribute("area", selectedArea);
 	    model.addAttribute("productList", productList);
 	    model.addAttribute("categorylist", categorylist);
 	    model.addAttribute("category", category);
 	    model.addAttribute("paging", pdto);
 	    model.addAttribute("minPrice", minPrice);
 	    model.addAttribute("maxPrice", maxPrice);
 	    model.addAttribute("keyword", keyword);

 	    return "product_search_list";
 	}




// 위치 관련 컨트롤
    
    
    @GetMapping("/region/search")
    @ResponseBody
    public List<RegionCodeDTO> searchByAddress(@RequestParam ("address") String address	) {
        return mapper.findRegionsByAddress(address);
    }
    
    
